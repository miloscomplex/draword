{"version":3,"sources":["components/ui/Navigation.js","components/ui/Header.js","components/gamePlay/PrePlay.js","components/phraseSelector/PhraseList.js","constants/index.js","redux/actions/index.js","components/phraseSelector/PhraseContainer.js","components/ui/GuesserWaitingRoom.js","components/gamePlay/NoDrawer.js","components/gamePlay/Error.js","components/gamePlay/PhraseSelection.js","services/Cable.js","components/ui/Timer.js","components/ui/TimerDisplay.js","components/ui/Score.js","components/canvas/ToolBox.js","components/canvas/Canvas.js","components/chatBox/ChatBoxInput.js","components/chatBox/ChatMessage.js","components/chatBox/ChatBoxBot.js","components/chatBox/ChatArea.js","components/ui/Callout.js","components/gamePlay/MainGamePlay.js","components/gamePlay/EndOfGame.js","components/gamePlay/DrawerLeft.js","redux/reducers/canvasReducer.js","redux/reducers/phrasesReducer.js","redux/reducers/roomsReducer.js","redux/reducers/busyReducer.js","redux/reducers/usersReducer.js","redux/reducers/timerReducer.js","redux/reducers/rootReducer.js","containers/GamePlay.js","containers/GameContainer.js","components/leaderboard/LeaderboardList.js","components/leaderboard/LeaderboardContainer.js","components/howToPlay/HowToPlay.js","components/rooms/NewRoomForm.js","components/rooms/Room.js","components/rooms/RoomsList.js","components/landingPage/LandingPage.js","components/ui/Footer.js","services/FourOFour.js","App.js","index.js"],"names":["Navigation","id","to","React","Component","Header","PrePlay","className","this","props","currentUser","name","drawer_id","onClick","event","handleDrawClick","type","handleGuessClick","PhraseList","phraseList","phrases","map","phraseObj","handleClick","phrase","console","log","match","API_ROOT","PARSE_JSON","res","json","HEADERS","loadRooms","dispatch","fetch","then","data","payload","setSelectedRoom","roomId","catch","err","editSelectedRoom","roomObj","room_id","method","headers","body","JSON","stringify","editUser","userObj","user_id","PhraseContainer","componentWillUnmount","componentDidMount","loadPhrases","phraseObjId","selectedRoom","selected_phrase_id","status","connect","state","rooms","phrasesList","busySignal","users","user","GuesserWaitingRoom","loadMainGamePlay","setTimeout","updateLocalStatus","NoDrawer","PhraseSelection","renderContent","cable","actioncable","createConsumer","Timer","timerChannel","timerChannelRef","subscriptions","create","channel","connected","disconnected","received","handleReceivedData","setState","time","Math","round","Date","now","start","startTimer","timer","setInterval","interval","stopTimer","isOn","clearInterval","resetTimer","elapsedTime","endTime","timeDiff","startTime","stopTime","params","TimerDisplay","ToolBox","handleClearClick","Canvas","canvasChannelRef","unsubscribe","handleGetFetch","drawings","canvasChannel","dataCache","drawOnCanvas","handlePostFetch","drawingObj","handleReceivedCanvasObj","response","drawing","startDrawing","isDrawing","nativeEvent","offsetX","offsetY","action","stopDrawing","configCanvas","canvas","canvasRef","current","width","canvasWidth","height","canvasHeight","style","context","getContext","lineCap","lineJoin","strokeStyle","color","lineWidth","miterLimit","contextRef","beginPath","moveTo","stroke","lineTo","closePath","save","fillStyle","bgColor","fillRect","createRef","canDraw","Fragment","onMouseDown","onMouseUp","onMouseMove","onMouseLeave","ref","ChatBoxInput","text","role","handleOnChange","target","value","handleOnSubmit","preventDefault","onSubmit","minLength","onChange","ChatMessage","ChatBoxBot","joined","left","myCallback","chatObj","render","ChatsArea","chatsChannelRef","roomURL","scrollToBottom","loadChats","chatsChannel","componentDidUpdate","messagesEnd","scrollIntoView","behavior","handleReceivedChat","chat","checkForPhrase","addChat","handleWin","end","toLowerCase","includes","chats","chatContainer","orderedChats","suchEmpty","el","sort","a","b","created_at","Callout","MainGamePlay","whichTimer","ChatArea","selectedPhrase","EndOfGame","matchId","title","DrawerLeft","canvasReducer","defaultStore","phrasesReducer","loading","roomsList","roomsReducer","newChat","busyReducer","usersReducer","timerReducer","rootReducer","combineReducers","GamePlay","matchObj","gamePlayChannelRef","gamePlayChannel","current_time","broadcastRoomStatus","renderBusy","gameStatus","getPhrase","phraseId","releasePhrase","addUserToRoom","room","GameContainer","createOrFindUser","uhOh","url","renderGamePlay","loadingUser","userId","LeaderboardList","counter","hearts","addHeart","count","leaders","leader","index","score","LeaderboardContainer","HowToPlay","NewRoomForm","handleChange","e","handleSubmit","stopPropagation","Room","RoomsList","disconnect","forEach","subscription","roomsChannel","removeSelectedRoom","handleReceivedRoom","mapRooms","loadingRooms","Footer","FourOFour","App","exact","path","component","LandingPage","routerProps","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e095fb53.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nclass Navigation extends React.Component {\n  render() {\n    return (\n      <div id='nav'>\n        <Link to='/new'>New Game</Link>\n        <Link to='/how-to-play'>How To Play</Link>\n        <Link to='/leaderboard'>Leaderboard</Link>\n      </div>\n    )\n  }\n}\n\nexport default Navigation\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Navigation from './Navigation'\nimport { connect } from 'react-redux'\n\nclass Header extends React.Component {\n\n  render() {\n\n    return (\n      <div id='header'>\n        <h1><Link to='/'>draword</Link></h1>\n        <Navigation />\n      </div>\n    )\n  }\n}\n\nexport default Header\n","import React from 'react'\n\nclass PrePlay extends React.Component {\n\n  render() {\n    return (\n      <div className='wrapper'>\n\n        <h2>\n          Hi there, {this.props.currentUser.name}\n        </h2>\n\n        <p>\n          I know, I know, <strong>{this.props.currentUser.name}</strong> isn't your name, but keeping with the theme it's your alias in the chat window. Click on a button to get this party started. If you only see the 'I will guess' button that means someone is already drawing in this room.\n        </p>\n\n        { !this.props.drawer_id && <button className='button, smaller' onClick={ event => this.props.handleDrawClick({type: 'drawer'}) }>I will draw</button> }\n\n        <button className='button, smaller' onClick={ event => this.props.handleGuessClick({type: 'guesser'}) }>I will guess</button>\n\n      </div>\n    )\n  }\n\n}\n\nexport default PrePlay\n","import React from 'react'\n\nclass PhraseList extends React.Component {\n\n  phraseList = (phrases) => {\n    return phrases.map( phraseObj => {\n      return (\n        <li key={phraseObj.id} onClick={ event => this.props.handleClick(phraseObj.id)} > {phraseObj.phrase} </li>\n      )\n    })\n  }\n\n  render() {\n    console.log('this.props.match= ', this.props.match);\n\n    return (\n      <div>\n        <ul className='phrases' >\n          { this.phraseList(this.props.phrases) }\n        </ul>\n      </div>\n    )\n  }\n\n}\n\nexport default PhraseList\n\n// helpers\n","export const API_ROOT = 'http://localhost:3000'\nexport const API_WS_ROOT = 'ws://localhost:3000/cable'\nexport const PARSE_JSON = res => res.json()\nexport const HEADERS = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n}\n","import { API_ROOT, PARSE_JSON, HEADERS } from '../../constants'\n\nexport function loadPhrases() {\n  return (dispatch) => {\n    fetch(`${API_ROOT}/random-phrases`).then(PARSE_JSON)\n    .then(data => dispatch({type: 'ADD_PHRASES', payload: data}))\n  }\n}\n\nexport function loadChats(roomId) {\n  return (dispatch) => {\n    //dispatch({ type: 'FETCHING' })\n    fetch(`${API_ROOT}/rooms/${roomId}`)\n    .then(PARSE_JSON)\n    //.then(data => console.log('loadChats= ', data.chats ))\n    .then(data => dispatch({type: 'LOAD_CHATS', payload: data}))\n  }\n}\n\nexport function addChat(chatObj) {\n  return (dispatch) => {\n    dispatch({ type: 'ADD_CHAT', payload: chatObj })\n  }\n}\n\nexport function setPhrase(phraseObj) {\n  return (dispatch) => {\n    //dispatch({ type: 'FETCHING' })\n    fetch(`${API_ROOT}/phrases/${phraseObj.phrase_id}`)\n    .then(PARSE_JSON)\n    //.then(data => console.log('setPhrase= ', data))\n    .then(data => dispatch({ type: 'SET_ROOM_PHRASE', payload: data }))\n    .catch( err =>  console.log('err= ', err))\n  }\n}\n\nexport function setRoom(roomId) {\n  return (dispatch) => {\n    //dispatch({ type: 'FETCHING' })\n    fetch(`${API_ROOT}/rooms/${roomId}`, {\n      method: 'PUT',\n      headers: HEADERS,\n      body: JSON.stringify(roomId)\n    }).then(PARSE_JSON)\n    .then(data => dispatch({ type: 'UPDATE_ROOM', payload: data }))\n  }\n}\n\nexport function getPhrase(phraseId) {\n  return (dispatch) => {\n    dispatch({ type: 'FETCHING' })\n    fetch(`${API_ROOT}/phrases/${phraseId}`)\n    .then(PARSE_JSON)\n    .then(data => dispatch({ type: 'SET_ROOM_PHRASE', payload: data }))\n  }\n}\n\nexport function loadRooms() {\n  return (dispatch) => {\n    dispatch({ type: 'LOADING_ROOMS' })\n    fetch(`${API_ROOT}/rooms`).then(PARSE_JSON)\n    .then(data => dispatch({type: 'ADD_ROOMS', payload: data}))\n  }\n}\n\nexport function broadcastRoomStatus(roomObj) {\n  return (dispatch) => {\n      dispatch({ type: 'UPDATE_SELECTED_ROOM', payload: roomObj.room })\n      console.log('broadcastRoomStatus', roomObj.room );\n    }\n}\n\nexport function setSelectedRoom(roomId) {\n  return (dispatch) => {\n    dispatch({ type: 'LOADING_ROOM' })\n    fetch(`${API_ROOT}/rooms/${roomId}`)\n    .then(PARSE_JSON)\n    .then(data => dispatch({ type: 'UPDATE_SELECTED_ROOM', payload: data}) )\n    .then( data => console.log('setSelectedRoom', data) )\n    .catch( err =>  console.log('err= ', err))\n  }\n}\n\nexport function updateSelectedRoom(roomId) {\n  return (dispatch) => {\n    //dispatch({ type: 'FETCHING' })\n    fetch(`${API_ROOT}/rooms/${roomId}`)\n    .then(PARSE_JSON)\n    .then(data => dispatch({ type: 'UPDATE_SELECTED_ROOM', payload: data}) )\n    .catch( err =>  console.log('err= ', err))\n  }\n}\n\nexport function loadRoom(roomObj) {\n  return (dispatch) => {\n    dispatch({ type: 'FETCHING' })\n    fetch(`${API_ROOT}/rooms/${roomObj.room_id}`)\n    .then(PARSE_JSON)\n    .then(data => dispatch({ type: 'LOAD_ROOM', payload: data}) )\n    .catch( err =>  console.log('err= ', err))\n  }\n}\n\nexport function editSelectedRoom(roomObj) {\n  //console.log('editRoom roomObj= ', roomObj);\n  return (dispatch) => {\n    dispatch({ type: 'FETCHING' })\n    fetch(`${API_ROOT}/rooms/${roomObj.room_id}`, {\n      method: 'PUT',\n      headers: HEADERS,\n      body: JSON.stringify(roomObj),\n    }).then(PARSE_JSON)\n    .then(data => dispatch({ type: 'UPDATE_SELECTED_ROOM', payload: data }))\n  }\n}\n\nexport function editTimer(timerObj) {\n  //console.log('editRoom timerObj= ', timerObj);\n  return (dispatch) => {\n    dispatch({ type: 'FETCHING_TIMER' })\n    fetch(`${API_ROOT}/timer/${timerObj.room_id}`, {\n      method: 'PUT',\n      headers: HEADERS,\n      body: JSON.stringify(timerObj),\n    }).then(PARSE_JSON)\n    .then(data => dispatch({ type: 'UPDATE_TIMER', payload: data }))\n  }\n}\n\nexport function createOrFindUser(userId) {\n  //console.log('editUser roomObj= ', roomObj);\n  return (dispatch) => {\n    dispatch({ type: 'LOADING_USER' })\n    fetch(`${API_ROOT}/users`, {\n      method: 'POST',\n      headers: HEADERS,\n      body: JSON.stringify(userId),\n    }).then(PARSE_JSON)\n    .then(data => dispatch({ type: 'UPDATE_USER', payload: data }))\n  }\n}\n\nexport function editUser(userObj) {\n  return (dispatch) => {\n    dispatch({ type: 'FETCHING' })\n    fetch(`${API_ROOT}/users/${userObj.user_id}`, {\n      method: 'PUT',\n      headers: HEADERS,\n      body: JSON.stringify(userObj),\n    }).then(PARSE_JSON)\n    .then(data => dispatch({ type: 'UPDATE_USER', payload: data }))\n  }\n}\n\nexport function removeUser(userObj) {\n  return (dispatch) => {\n    fetch(`${API_ROOT}/users/${userObj.user_id}`, {\n      method: 'DELETE',\n      headers: HEADERS,\n      body: JSON.stringify(userObj),\n    }).then(PARSE_JSON)\n    .then(data => dispatch({ type: 'REMOVE_USER', payload: data }))\n  }\n}\n","import React from 'react'\nimport PhraseList from './PhraseList'\nimport { connect } from 'react-redux'\nimport { editSelectedRoom, loadPhrases } from '../../redux/actions'\n\nclass PhraseContainer extends React.Component {\n\n  componentWillUnmount = () => {\n    console.log('PhraseSelector umounted!');\n  }\n\n  componentDidMount = () => {\n    this.props.loadPhrases()\n    //console.log('phrase mounted!.. in room', this.props.match.params.id)\n  }\n\n  handleClick = (phraseObjId) => {\n    //console.log(matchObjId, phraseObjId)\n    // set the phrase\n    const playing = 'playing'\n    this.props.editSelectedRoom( {room_id: this.props.selectedRoom.id, selected_phrase_id: phraseObjId, status: playing } )\n  }\n\n  render() {\n    return (\n      <div className='wrapper'>\n        <div className='phrase-selector'>\n          <h2>Phrase Selector</h2>\n          <p className='description'>Select One of the phrases/words below to draw.</p>\n\n          <PhraseList phrases={this.props.phrases} handleClick={this.handleClick} match={this.props.match} />\n\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedRoom: state.rooms.selectedRoom,\n    phrases: state.phrases.phrasesList,\n    busySignal: state.busySignal,\n    currentUser: state.users.user\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    loadPhrases: () => { dispatch(loadPhrases()) },\n    editSelectedRoom: phraseObj => { dispatch(editSelectedRoom(phraseObj)) },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PhraseContainer)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { broadcastRoomStatus } from '../../redux/actions'\n\nclass GuesserWaitingRoom extends React.Component {\n  // TODO: Make a set timeout and enter mainGamePlay\n  loadMainGamePlay = () => {\n    const status = 'playing'\n    //this.props.updateLocalStatus( status )\n  }\n\n  componentDidMount = () => {\n    setTimeout(this.loadMainGamePlay, 500)\n  }\n\n  render() {\n    const { match } = this.props\n\n    return (\n      <div>\n        <h2>The drawee is selecting a phrase</h2>\n        <p className='description'>The game will appear once they have decided on a clue</p>\n      </div>\n    )\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedRoom: state.rooms.selectedRoom\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateLocalStatus: status => dispatch({ type: 'UPDATE_LOCAL_STATUS', payload: status})\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GuesserWaitingRoom)\n","import React from 'react'\n\nclass NoDrawer extends React.Component {\n\n  render() {\n    const { match, handleDrawClick } = this.props\n\n    return (\n      <div className='wrapper'>\n        <h2>There's not an active drawer yet</h2>\n        { !this.props.drawer_id && <button className='button, smaller' onClick={ event => handleDrawClick({type: 'drawer'}) }>I will draw</button> }\n      </div>\n    )\n  }\n\n}\n\nexport default NoDrawer\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nclass Error extends React.Component {\n\n  render() {\n    const { match } = this.props\n\n    return (\n      <div className='wrapper'>\n        <h2>Something isn't quite right... Please select another room</h2>\n        <div className='button'><Link to='/new'>New Game</Link></div>\n\n      </div>\n    )\n  }\n\n}\n\nexport default Error\n","import React from 'react'\nimport PhraseContainer from '../phraseSelector/PhraseContainer'\nimport GuesserWaitingRoom from '../ui/GuesserWaitingRoom'\nimport Error from './Error.js'\nimport NoDrawer from './NoDrawer.js'\nimport { Link } from 'react-router-dom'\n\nclass PhraseSelection extends React.Component {\n\n  renderContent = () => {\n    const { selectedRoom, currentUser } = this.props\n\n    switch (selectedRoom.drawer_id) {\n      case currentUser.id:\n        return <PhraseContainer match={this.props.match} />\n      case null:\n        return <NoDrawer match={this.props.match} handleDrawClick={this.props.handleDrawClick}/>\n      default:\n        return <GuesserWaitingRoom match={this.props.match} />\n      // default same as !currentUser.id \n    }\n  }\n\n  render() {\n\n    return (\n      <div className='wrapper'>\n        { this.renderContent() }\n      </div>\n    )\n  }\n\n}\n\nexport default PhraseSelection\n","import { API_WS_ROOT } from '../constants'\nimport actioncable from 'actioncable'\n\nconst cable = actioncable.createConsumer(API_WS_ROOT)\n\nexport default cable\n","import React from 'react'\nimport { API_ROOT, HEADERS } from '../../constants'\nimport cable from '../../services/Cable'\nimport { connect } from 'react-redux'\nimport { editSelectedRoom } from '../../redux/actions'\n\nclass Timer extends React.Component {\n\n  // TODO: MAKE USE OF REDUCER FOR TIMER AND POST/PUT THE TIME TO THE SERVER\n  // DON'T FORGET A RESET OR STOP FOR UNMOUNTING\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      room_id: this.props.match.params.id,\n      time: 0,\n      isOn: false,\n      start: 0\n    }\n    this.timerChannelRef = null\n  }\n\n  timerChannel = () => {\n    this.timerChannelRef = cable.subscriptions.create({\n    channel: `TimersChannel`,\n    room_id: this.props.selectedRoom.id,\n    },\n      {connected: () => {\n        console.log('timerChannel connected!')\n      },\n      disconnected: () => {\n        console.log('timerChannel disconnected!')\n      },\n      received: data => {\n        this.handleReceivedData(data)\n        console.log('timerChannel data received', data)\n      },\n    })\n  }\n\n  handleReceivedData = data => {\n    //console.log('receivedData= ', data);\n    //this.props.updateSelectedRoom(data)\n    this.setState({\n      time: Math.round( (Date.now() - this.state.start) / 1000 )\n    })\n  }\n\n  startTimer = () => {\n    this.timer = setInterval( () => { this.props.editSelectedRoom({ room_id: this.state.room_id, timer: this.interval() },  1000)})}\n\n  interval = () => {\n    console.log('this.stat.time', this.state.time );\n    return Math.round( (Date.now() - this.state.start) / 1000)\n  }\n\n  stopTimer = () => {\n    this.setState({isOn: false})\n    clearInterval(this.timer)\n  }\n\n  resetTimer = () => {\n    this.setState({time: 0, isOn: false})\n  }\n\n  elapsedTime = () => {\n    this.endTime = new Date()\n    let timeDiff = this.endTime - this.startTime\n    // remove miliseconds & round seconds\n    this.stopTime = Math.round(timeDiff / 1000)\n    return this.stopTime\n  }\n\n  componentDidMount = () => {\n    this.setState({\n      isOn: true,\n      time: this.state.time,\n      start: Date.now() - this.state.time\n    })\n    //this.startTimer()\n\n  }\n\n  componentWillUnmount = () => {\n    this.stopTimer()\n  }\n\n  render() {\n    return (\n      <div className='timer'>\n        Elapsed Time: {this.state.time}\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    editSelectedRoom: roomObj => { dispatch(editSelectedRoom(roomObj)) }\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Timer)\n","import React from 'react'\nimport { API_ROOT, HEADERS } from '../../constants';\n\nclass TimerDisplay extends React.Component {\n\n  render() {\n    return (\n      <div className='timer'>\n        Elapsed Time: \n      </div>\n    )\n  }\n}\n\nexport default TimerDisplay\n","import React from 'react'\n\nclass Score extends React.Component {\n\n  render() {\n    return (\n      <div className='score'>\n        Score Here\n      </div>\n    )\n  }\n}\n\nexport default Score\n","import React from 'react'\n\nclass ToolBox extends React.Component {\n  render() {\n    return (\n      <div id='toolbox'>\n       <li onClick={event => this.props.handleClearClick(event)}>clear</li>\n      </div>\n    )\n  }\n}\n\nexport default ToolBox\n","import React from 'react'\nimport { API_ROOT, HEADERS } from '../../constants';\nimport cable from '../../services/Cable'\nimport ToolBox from './ToolBox'\nimport { connect } from 'react-redux'\n\nclass Canvas extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.canvasRef = React.createRef()\n    this.contextRef = React.createRef()\n    this.state = {\n      isDrawing: false,\n      color: 'yellow',\n      lineWidth: 7,\n      drawings: [],\n      canvasWidth: 500,\n      canvasHeight: 500,\n      roomId: this.props.match.params.id,\n      canDraw: true,\n      bgColor: '#000000'\n    }\n    this.dataCache = null\n    this.canvasChannelRef = null\n  }\n\n  componentDidMount() {\n    this.configCanvas()\n    this.handleGetFetch()\n    this.canvasChannel()\n  }\n\n  componentWillUnmount = () => {\n    this.canvasChannelRef.unsubscribe()\n  }\n\n  handleGetFetch = () => {\n    fetch(`${API_ROOT}/canvas/${this.state.roomId}`)\n      .then(res => res.json())\n      .then(drawings => this.setState({ drawings }))\n  }\n\n  canvasChannel = () => {\n    this.canvasChannelRef = cable.subscriptions.create({\n    channel: `CanvasChannel`,\n    id: this.state.roomId\n    },\n      {connected: () => {\n        console.log('CanvasChannel connected!')\n      },\n        disconnected: () => {\n          console.log('CanvasChannel disconnected!')\n        },\n        received: data => {\n          this.dataCache = data\n          this.drawOnCanvas(data)\n          //console.log('CanvasChannel data received', data)\n        }\n    })\n  }\n\n  handlePostFetch = drawingObj => {\n    if ( this.dataCache === drawingObj ) { return }\n    // kill it if it's a duplicate\n    fetch(`${API_ROOT}/canvas`, {\n      method: 'POST',\n      headers: HEADERS,\n      body: JSON.stringify(drawingObj)\n    });\n  }\n\n  handleReceivedCanvasObj = response => {\n    const { drawing } = response\n    if (drawing !== this.state.drawings ) {\n      this.setState({\n        drawings: [...this.state.drawings, drawing]\n      })\n    }\n  }\n\n  startDrawing = (event) => {\n    //console.log(event)\n    if (this.state.isDrawing) {\n      return\n    }\n    const {offsetX, offsetY} = event.nativeEvent\n    this.setState({ isDrawing: true })\n    this.handlePostFetch(\n    {   action: 'beginPath',\n        offsetX: offsetX,\n        offsetY: offsetY,\n        room_id: this.state.roomId\n    })\n  }\n\n  stopDrawing = (event) => {\n    if (!this.state.isDrawing) {\n      return\n    }\n    const {offsetX, offsetY} = event.nativeEvent\n    this.setState({ isDrawing: false })\n    this.handlePostFetch(\n    {   action: 'closePath',\n        offsetX: offsetX,\n        offsetY: offsetY,\n        room_id: this.state.roomId\n    })\n  }\n\n  drawing = (event) => {\n    if (!this.state.isDrawing) {\n      return\n    }\n    const {offsetX, offsetY} = event.nativeEvent\n    this.handlePostFetch(\n    {   action: 'lineTo',\n        offsetX: offsetX,\n        offsetY: offsetY,\n        room_id: this.state.roomId\n    })\n  }\n\n  configCanvas = () => {\n    const canvas = this.canvasRef.current\n    // double pixel depth for higher res\n    // need .scale\n    canvas.width = this.state.canvasWidth\n    canvas.height = this.state.canvasHeight\n    canvas.style.width = `${this.state.canvasWidth}px`\n    canvas.style.height = `${this.state.canvasHeight}px`\n\n    const context = canvas.getContext('2d')\n    context.lineCap = 'round'\n    context.lineJoin = 'round'\n    context.strokeStyle = this.state.color\n    context.lineWidth = this.state.lineWidth\n    context.miterLimit = 2\n    this.contextRef.current = context\n  }\n\n  drawOnCanvas = (drawingObj) => {\n    //console.log('hello', drawingObj);\n    const {offsetX, offsetY} = drawingObj\n    const canvas = this.contextRef.current\n    switch (drawingObj.action) {\n      case 'beginPath':\n        //canvas.strokeStyle = 'red'\n        canvas.beginPath()\n        canvas.moveTo(offsetX, offsetY)\n        this.setState({ isDrawing: true });\n        canvas.stroke();\n        break\n\n      case 'lineTo':\n        canvas.lineTo(offsetX, offsetY)\n        canvas.stroke();\n        break\n\n      case 'closePath':\n        canvas.closePath()\n        let saveVal = canvas.save();\n        this.setState({ isDrawing: false })\n        break\n\n      case 'clearCanvas':\n        canvas.fillStyle = this.state.bgColor\n        canvas.fillRect(0, 0, this.state.canvasWidth, this.state.canvasHeight)\n        break\n\n      default:\n        return\n    }\n  }\n\n  handleClearClick = (event) => {\n    this.handlePostFetch(\n    {   action: 'clearCanvas',\n        room_id: this.state.roomId\n    })\n  }\n\n  render() {\n    //console.log('cable= ', cable)\n    //console.log('this.canvasChannel', this.canvasChannel());\n    const { currentUser, selectedRoom } = this.props\n\n    return (\n\n        currentUser.id === selectedRoom.drawer_id\n        ?\n        <React.Fragment>\n          <canvas\n            onMouseDown={event => this.startDrawing(event)}\n            onMouseUp={event => this.stopDrawing(event)}\n            onMouseMove={event => this.drawing(event)}\n            onMouseLeave={event => this.stopDrawing(event)}\n            ref={this.canvasRef}\n          />\n          <ToolBox handleClearClick={this.handleClearClick} />\n        </React.Fragment>\n        :\n        <React.Fragment>\n          <canvas ref={this.canvasRef} />\n        </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedRoom: state.rooms.selectedRoom,\n    currentUser: state.users.user,\n  }\n}\n\nexport default connect(mapStateToProps)(Canvas)\n","import React from 'react'\nimport { API_ROOT, HEADERS } from '../../constants'\n\n\nclass ChatBoxInput extends React.Component {\n\n  state = {\n    text: '',\n    room_id: this.props.roomId,\n    role: this.props.selectedRoom.drawer_id === this.props.currentUser.id ? 'drawer' : 'guesser',\n    name: this.props.currentUser.name,\n  }\n\n  handleOnChange = event => {\n    this.setState({\n      text: event.target.value\n    })\n  }\n\n  handleOnSubmit = event => {\n    event.preventDefault()\n    fetch(`${API_ROOT}/chats`, {\n      method: 'POST',\n      headers: HEADERS,\n      body: JSON.stringify(this.state)\n    });\n    this.setState({ text: '' })\n  }\n\n  render() {\n    return (\n      <form name='chatBoxForm' onSubmit={event => this.handleOnSubmit(event)} >\n        <input type='text' minLength='2' value={this.state.text} onChange={this.handleOnChange}/>\n        <button value='submit'>submit</button>\n      </form>\n    )\n\n  }\n}\n\nexport default ChatBoxInput\n","import React from 'react'\n\nclass ChatMessage extends React.Component {\n\n  render() {\n    return (\n      <p className={this.props.role}>\n        <span>{this.props.role}</span>\n        <strong>{ this.props.name }:</strong> { this.props.text }\n      </p>\n    )\n  }\n}\n\nexport default ChatMessage\n","import React from 'react'\nimport { API_ROOT, HEADERS } from '../../constants'\nimport { connect } from 'react-redux'\n\n\nclass ChatBoxBot extends React.Component {\n\n  joined = {\n    text: `has joined the game`,\n    room_id: this.props.roomId,\n    role: 'admin',\n    name: this.props.currentUser.name\n  }\n\n  left = {\n    text: `has left the game`,\n    room_id: this.props.roomId,\n    role: 'admin',\n    name: this.props.currentUser.name\n  }\n\n  // intervalID = () => window.setInterval(this.myCallback, 2000)\n\n\n  myCallback = (chatObj) => {\n     // Parameters are purely optional.\n     fetch(`${API_ROOT}/chats`, {\n       method: 'POST',\n       headers: HEADERS,\n       body: JSON.stringify(chatObj)\n     })\n  }\n\n  componentDidMount = () => {\n    this.myCallback(this.joined)\n  }\n\n  componentWillUnmount = () => {\n    // causing 500 error\n    // this.myCallback(this.left)\n  }\n\n  render = () => {\n    return (\n      ''\n    )\n  }\n}\n\nexport default ChatBoxBot\n","import React from 'react';\nimport ChatBoxInput from '../chatBox/ChatBoxInput';\nimport ChatMessage from './ChatMessage';\nimport cable from '../../services/Cable'\nimport { connect } from 'react-redux'\nimport { loadChats, addChat, editSelectedRoom } from '../../redux/actions'\nimport ChatBoxBot from './ChatBoxBot'\n\nclass ChatsArea extends React.Component {\n\n  chatsChannelRef = null\n  roomURL = this.props.match.params.id\n\n  componentDidMount = () => {\n    console.log('chatArea mounted!');\n    this.scrollToBottom()\n    this.props.loadChats(this.roomURL)\n    this.chatsChannel()\n  }\n\n  componentDidUpdate = () => {\n    this.scrollToBottom()\n  }\n\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  chatsChannel = () => {\n    this.chatsChannelRef = cable.subscriptions.create({\n    channel: `ChatsChannel`,\n    id: this.props.selectedRoom.id,\n    //current_user: this.props.currentUser\n    },\n      {connected: () => {\n        console.log('ChatsChannel connected!')\n      },\n        disconnected: () => {\n          console.log('ChatsChannel disconnected!')\n        },\n        received: data => {\n          this.handleReceivedChat(data)\n          console.log('ChatsChannel data received')\n        },\n    })\n  }\n\n  componentWillUnmount = () => {\n    this.chatsChannelRef.unsubscribe()\n    //cable.subscriptions.remove(this.subscriptionRef)\n    console.log('subscriptionRef', this.chatsChannelRef)\n    //this.subscriptionRef.unsubscribe()\n    console.log('subscriptionRef2', this.chatsChannelRef)\n    // cable.subscriptions.subscriptions.forEach( subscription => {\n    //   subscription.unsubscribe()\n    // })\n    //cable.disconnect()\n  }\n\n  handleReceivedChat = response => {\n    const { chat } = response\n    this.checkForPhrase( chat, this.props.selectedRoom.phrase )\n    this.props.addChat(chat)\n  }\n\n  handleWin = (phraseObj, end) => {\n    this.props.editSelectedRoom({ room_id:  this.props.selectedRoom.id, status: end })\n    // alert(`Hot Dang you got it: ${phraseObj.phrase}`)\n  }\n\n  checkForPhrase = (chatObj, phraseObj) => {\n    console.log('checkForPhrase= ', phraseObj)\n    let winner = false\n    const end = 'end'\n    phraseObj && chatObj.text.toLowerCase().includes(phraseObj.phrase.toLowerCase()) && this.handleWin(phraseObj, end)\n  }\n\n  render = () => {\n    //console.log('orderedChats= ', orderedChats(this.props.chats));\n    //console.log(cable);\n    const { chats } = this.props.selectedRoom\n    const { currentUser, selectedRoom } = this.props\n    //console.log('chats= ', chats);\n\n    return (\n      <div id='chatWindow'>\n        <h2>Chat Window</h2>\n        { /* you can't pass down objects via props */ }\n        <div ref={this.chatContainer} className='chat-messages'>\n          { orderedChats(chats) ? orderedChats(chats) : suchEmpty }\n          <div className='scroll-fix'\n            ref={(el) => { this.messagesEnd = el }}>\n          </div>\n        </div>\n\n        <ChatBoxInput roomId={this.roomURL} currentUser={currentUser} selectedRoom={selectedRoom} />\n\n        <ChatBoxBot roomId={this.roomURL} currentUser={currentUser} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedRoom: state.rooms.selectedRoom,\n    busySignal: state.busySignal,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    loadChats: roomId => { dispatch(loadChats(roomId)) },\n    addChat: chatObj => { dispatch(addChat(chatObj)) },\n    editSelectedRoom: phraseObj => { dispatch(editSelectedRoom(phraseObj)) }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatsArea)\n\n// helpers\n\nconst orderedChats = chats => {\n  const sortedChats = chats.sort(\n    (a, b) => new Date(a.created_at) - new Date(b.created_at)\n  )\n  return sortedChats.map(chat => {\n    return <ChatMessage key={chat.id} text={chat.text} role={chat.role} name={chat.name} />\n  })\n}\n\nconst suchEmpty = 'Wow Such Empty'\n","import React from 'react'\n\nclass Callout extends React.Component {\n\n  render() {\n    const { currentUser, selectedRoom } = this.props\n    return (\n      currentUser.id === selectedRoom.drawer_id\n        ?\n      (<div className='phraseReminder'>\n        Hey, <strong>{currentUser.name}</strong>! Your phrase/word is <strong>{ this.props.selectedRoom.phrase.phrase }</strong>\n      </div>)\n      :\n      (<div className='phraseReminder'>\n        Hey, <strong>{currentUser.name}</strong>! Remember to think of popular Karaoke songs\n      </div>)\n    )\n  }\n}\n\nexport default Callout\n","import React from 'react'\nimport Timer from '../ui/Timer'\nimport TimerDisplay from '../ui/TimerDisplay'\nimport Score from '../ui/Score'\nimport Canvas from '../canvas/Canvas'\nimport ChatArea from '../chatBox/ChatArea'\nimport Callout from '../ui/Callout'\nimport { connect } from 'react-redux'\nimport { setSelectedRoom } from '../../redux/actions'\n\nclass MainGamePlay extends React.Component {\n\n  componentDidMount = () => {\n    const { id } = this.props.match.params\n    // ping the db to update status\n    this.props.setSelectedRoom(id)\n    console.log('match= ', this.props.match)\n  }\n\n  whichTimer = () => {\n    const { currentUser, selectedRoom, match } = this.props\n\n    return currentUser.id === selectedRoom.drawer_id  ? <Timer match={match} /> : <TimerDisplay match={match} />\n  }\n\n  render() {\n\n    const { selectedRoom, currentUser, match } = this.props\n\n    return (\n      <React.Fragment>\n        <Callout selectedRoom={selectedRoom} currentUser={currentUser} />\n\n        <div id='wrapper'>\n          <div id='canvas'>\n            <Canvas match={match} />\n            { this.whichTimer() }\n          </div>\n          <ChatArea match={match} currentUser={currentUser} />\n        </div>\n      </React.Fragment>\n    )\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedRoom: state.rooms.selectedRoom,\n    selectedPhrase: state.selectedPhrase,\n    currentUser: state.users.user,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setSelectedRoom: roomId => { dispatch(setSelectedRoom(roomId)) },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainGamePlay)\n","import React from 'react'\nimport { editSelectedRoom } from '../../redux/actions'\nimport { connect } from 'react-redux'\n\nclass EndOfGame extends React.Component {\n\n  matchId = this.props.match.params.id\n\n  componentDidMount = () => {\n    // ping the db to update status\n    this.props.setSelectedRoom(this.matchId)\n    console.log('match= ', this.props.match)\n  }\n\n  handleClick = () => {\n    const { selectedRoom, editSelectedRoom } = this.props\n    const preplay = 'preplay'\n\n    this.props.editSelectedRoom({room_id: this.props.selectedRoom.id, status: preplay, selected_phrase_id: null, drawer_id: null })\n  }\n\n  render() {\n    const { selectedRoom } = this.props\n\n    return (\n      <div className='wrapper'>\n        <h2>\n          Wow you won ! { `The correct answer was ${selectedRoom.phrase.phrase}`}\n        </h2>\n        <p>\n          { `Good Job room: ${selectedRoom.title}! This is the end of Game` }\n        </p>\n        { /* // FIXME: IT WON'T SEND ACTIONCABLE SIGNAL TO CHANGE STATE TO ADDITINAL PLAYERS ODD B/C CHAT AREA WORKS JUST FINE??? */ }\n         <button onClick={ event => this.handleClick() }>start over\n         </button>\n      </div>\n    )\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    editSelectedRoom: phraseObj => { dispatch(editSelectedRoom(phraseObj)) }\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedRoom: state.rooms.selectedRoom\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(EndOfGame)\n","import React from 'react'\n\nclass DrawerLeft extends React.Component {\n\n  render() {\n    return (\n      <div className='wrapper'>\n\n        <h2>\n          Hi there, {this.props.currentUser.name}\n        </h2>\n\n        <h3>\n          The drawer left the game. So it has reset.\n        </h3>\n\n        { !this.props.drawer_id && <button className='button, smaller' onClick={ event => this.props.handleDrawClick({type: 'drawer'}) }>I will draw</button> }\n\n        <button className='button, smaller' onClick={ event => this.props.handleGuessClick({type: 'guesser'}) }>I will guess</button>\n\n      </div>\n    )\n  }\n\n}\n\nexport default DrawerLeft\n","export default canvasReducer\n\nfunction canvasReducer(state = [], action) {\n    return state\n}\n","const defaultStore = {\n  phrasesList: [],\n}\n\nfunction phrasesReducer(state = defaultStore, action) {\n  switch (action.type) {\n    case 'ADD_PHRASES':\n      return {...state, phrasesList: action.payload }\n    case 'LOAD_PHRASES':\n      return action.payload\n    default:\n      return state\n  }\n\n}\n\nexport default phrasesReducer\n","\nconst defaultStore = {\n  loading: false,\n  roomsList: [],\n  selectedRoom: ''\n}\n\nfunction roomsReducer(state = defaultStore, action) {\n  switch (action.type) {\n    case 'LOAD_CHAT':\n      return {...state, chats: action.payload.chats }\n    case 'ADD_CHAT':\n      const newChat = action.payload\n      return {\n        ...state,\n        selectedRoom: {\n          ...state.selectedRoom,\n            chats: [ ...state.selectedRoom.chats, newChat ]\n        }\n      }\n    case 'LOADING_ROOMS':\n      return {...state, loading: true }\n    case 'LOADING_ROOM':\n      return {...state, loading: true }\n    case 'ADD_ROOMS':\n      return {...state, roomsList: action.payload, loading: false }\n    case 'UPDATE_SELECTED_ROOM':\n      return {...state, selectedRoom: action.payload, loading: false }\n    case 'UPDATE_LOCAL_STATUS':\n      return {\n        ...state,\n        selectedRoom: {\n          ...state.selectedRoom,\n          status: action.payload\n        }\n    }\n    case 'REMOVE_SELECTED_ROOM':\n      return {...state, selectedRoom: '' }\n    case 'LOAD_ROOM':\n      return {...state, roomsList: { ...state.roomsList, roomsList: action.payload }}\n    case 'RELEASE_PHRASE':\n      return {\n        ...state,\n        selectedRoom: {\n          ...state.selectedRoom,\n            selected_phrase_id: null,\n            selectedPhrase: null\n        }\n      }\n    default:\n      return state\n  }\n}\n\nexport default roomsReducer\n","function busyReducer(state = false, action) {\n  switch (action.type) {\n    case 'FETCHING':\n      return true\n    case 'ADD_PHRASES':\n      return false\n    case 'LOAD_ROOMS':\n      return false\n    case 'ADD_ROOMS':\n      return false\n    case 'UPDATE_USER':\n      return false\n    case 'LOAD_CHATS':\n      return false\n    case 'UPDATE_SELECTED_ROOM':\n      return false\n    default:\n      return state\n  }\n\n}\n\nexport default busyReducer\n","\nconst defaultStore = {\n  loading: false,\n  user: []\n}\n\nfunction usersReducer(state = defaultStore, action) {\n  switch (action.type) {\n    case 'LOADING_USER':\n      return {...state, loading: true }\n    case 'CREATE_USER':\n      return {...state, user: action.payload, loading: false }\n    case 'UPDATE_USER':\n      return {...state, user: action.payload, loading: false }\n    case 'REMOVE_USER':\n      return {...state, user: [] }\n    default:\n      return state\n  }\n}\n\nexport default usersReducer\n","\nconst defaultStore = {\n  loading: false,\n}\n\nfunction timerReducer(state = defaultStore, action) {\n  switch (action.type) {\n    case 'FETCHING_TIMER':\n      return {...state, loading: true }\n    case 'UPDATE_TIMER':\n      return {...state, timer: action.payload, loading: false }\n    default:\n      return state\n  }\n}\n\nexport default timerReducer\n","import { combineReducers } from 'redux'\nimport canvasReducer from './canvasReducer'\nimport phrasesReducer from './phrasesReducer'\nimport roomsReducer from './roomsReducer'\nimport busyReducer from './busyReducer'\nimport usersReducer from './usersReducer'\nimport timerReducer from './timerReducer'\n\nconst rootReducer = combineReducers({\n  canvas: canvasReducer,\n  phrases: phrasesReducer,\n  busySignal: busyReducer,\n  rooms: roomsReducer,\n  users: usersReducer,\n  timer: timerReducer,\n})\n\nexport default rootReducer\n","import React from 'react'\nimport PrePlay from '../components/gamePlay/PrePlay'\nimport PhraseSelection from '../components/gamePlay/PhraseSelection'\nimport MainGamePlay from '../components/gamePlay/MainGamePlay'\nimport EndOfGame from '../components/gamePlay/EndOfGame'\nimport DrawerLeft from '../components/gamePlay/DrawerLeft'\n\nimport cable from '../services/Cable'\nimport PhraseContainer from '../components/phraseSelector/PhraseContainer'\nimport { connect } from 'react-redux'\nimport { getPhrase, editSelectedRoom, editUser, loadRooms, createOrFindUser, setSelectedRoom, broadcastRoomStatus } from '../redux/actions'\nimport rootReducer from '../redux/reducers/rootReducer'\n\n\nclass GamePlay extends React.Component {\n\n  // match is this browser props\n  matchObj = this.props.match\n  matchId = this.props.match.params.id\n\n  gamePlayChannelRef = null\n\n  // need to add action cable to have overlays and announcements broadcasted\n  gamePlayChannel = () => {\n    this.gamePlayChannelRef = cable.subscriptions.create({\n    channel: `RoomChannel`,\n    room_id: this.props.selectedRoom.id,\n    user_id: this.props.currentUser.id\n    },\n      {connected: () => {\n        console.log('RoomChannel connected!')\n      },\n      disconnected: () => {\n        console.log('RoomChannel disconnected!')\n      },\n      received: data => {\n        !data.current_time && this.handleReceivedData(data)\n        console.log('RoomChannel data received', data)\n      },\n    })\n  }\n\n  componentDidMount = () => {\n    // init cable\n    this.gamePlayChannel()\n    // // FIXME: DO I MOVE MY SERVERSIDE LOGIC HERE? THERE SEEMS TO BE ISSUES WITH THE unsubscribe ALL UTITLIZED IN VARIOUS AREAS OF THE GAME\n  }\n\n  componentWillUnmount = () => {\n    console.log('GamePlay unmounted')\n    this.gamePlayChannelRef.unsubscribe()\n    // removing for now seems redundant\n    // console.log('cable.subscriptions', cable.subscriptions);\n    // cable.subscriptions.subscriptions.forEach( subscription => {\n    //   subscription.unsubscribe()\n    // })\n    // cable.disconnect()\n    // now null-ing is executed by unsubscribe of action_cable for gamePlay\n  }\n\n  handleReceivedData = data => {\n    //console.log('receivedData= ', data);\n    this.props.broadcastRoomStatus(data)\n  }\n\n  handleDrawClick = userObj => {\n    const { currentUser, selectedRoom } = this.props\n    const statusStr = 'start'\n\n    this.props.editSelectedRoom({room_id: selectedRoom.id, drawer_id: currentUser.id, status: statusStr })\n  }\n\n  handleGuessClick = userObj => {\n    const statusStr = 'start'\n    // don't forget to pass room_id elsewise sets it to null\n    this.props.editSelectedRoom({ room_id: this.matchId, status: statusStr })\n  }\n\n  renderBusy = () => {\n    return <span className='loading-message'> </span>\n  }\n\n\n  renderContent = () => {\n    const { selectedRoom, currentUser, match, busySignal, setSelectedRoom, editSelectedRoom } = this.props\n\n    switch (this.props.gameStatus) {\n      case 'preplay':\n        return <PrePlay\n                  drawer_id={selectedRoom.drawer_id}\n                  currentUser={currentUser}\n                  handleDrawClick={this.handleDrawClick} handleGuessClick={this.handleGuessClick}\n                />\n      case 'start':\n        return <PhraseSelection handleDrawClick={this.handleDrawClick} selectedRoom={selectedRoom} currentUser={currentUser} drawer_id={selectedRoom.drawer_id} />\n      case 'playing':\n        return <MainGamePlay match={match} />\n      case 'end':\n        return <EndOfGame match={match} setSelectedRoom={setSelectedRoom} />\n      case 'drawerLeft':\n        return <DrawerLeft\n          match={match}\n          currentUser={currentUser}\n          setSelectedRoom={setSelectedRoom}\n          drawer_id={selectedRoom.drawer_id}\n          handleDrawClick={this.handleDrawClick} handleGuessClick={this.handleGuessClick}\n        />\n      default:\n        return <h2>Something isn't quite right...</h2>\n    }\n  }\n\n  render() {\n    return (\n      <div>\n          { this.renderContent() }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedRoom: state.rooms.selectedRoom,\n    gameStatus: state.rooms.selectedRoom.status,\n    selectedPhrase: state.selectedPhrase,\n    currentUser: state.users.user,\n    busySignal: state.busySignal,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    //releasePhrase: () => dispatch({ type: 'RELEASE_PHRASE' }),\n    getPhrase: phraseId => { dispatch(getPhrase(phraseId)) },\n    releasePhrase: phraseObj => { dispatch(editSelectedRoom(phraseObj)) },\n    editUser: userObj => { dispatch(editUser(userObj)) },\n    addUserToRoom: userObj => { dispatch(editUser(userObj)) },\n    loadRooms: () => { dispatch(loadRooms()) },\n    editSelectedRoom: phraseObj => { dispatch(editSelectedRoom(phraseObj)) },\n    setSelectedRoom: roomId => { dispatch(setSelectedRoom(roomId)) },\n    broadcastRoomStatus: roomObj => { dispatch(broadcastRoomStatus(roomObj)) }\n  }\n}\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePlay)\n","import React from 'react'\nimport PrePlay from '../components/gamePlay/PrePlay'\nimport GamePlay from './GamePlay'\nimport { connect } from 'react-redux'\nimport { setSelectedRoom, editSelectedRoom, createOrFindUser } from '../redux/actions'\nimport cable from '../services/Cable'\n\nclass GameContainer extends React.Component {\n\n  // match is this browser props\n  matchObj = this.props.match\n  matchId = this.props.match.params.id\n\n  componentDidMount = () => {\n    const { currentUser } = this.props\n\n    this.props.createOrFindUser({ user_id: currentUser.id, room_id: this.matchId })\n    this.props.setSelectedRoom(this.matchId)\n  }\n\n  componentWillUnmount = () => {\n    console.log('GameContainer unmounted!');\n  }\n\n  renderBusy = () => {\n    return <span className='loading-message'> </span>\n  }\n\n  uhOh = () => {\n    return <h2>Whoops! something went wrong maybe <code>{this.matchObj.url}</code> isn't a valid room</h2>\n  }\n\n  renderGamePlay = () => {\n    return this.props.loadingUser ? this.renderBusy() : <GamePlay match={this.matchObj} />\n  }\n\n  render() {\n    const { selectedRoom } = this.props\n\n    return (\n      <div>\n        {\n          selectedRoom\n          ?\n          this.renderGamePlay()\n          :\n          this.uhOh()\n        }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedRoom: state.rooms.selectedRoom,\n    currentUser: state.users.user,\n    loadingUser: state.users.loading,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setSelectedRoom: roomId => { dispatch(setSelectedRoom(roomId)) },\n    editSelectedRoom: phraseObj => { dispatch(editSelectedRoom(phraseObj)) },\n    createOrFindUser: userObj => { dispatch(createOrFindUser(userObj)) },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameContainer)\n","import React from 'react'\n\nclass LeaderboardList extends React.Component {\n  state = {\n    counter: 0,\n    hearts: []\n  }\n\n  addHeart = (id, value) => {\n    console.log('i was clicked')\n    let hearts = [...this.state.hearts];\n    if (hearts[id]) {\n      hearts[id].count = hearts[id].count + 1\n    }\n    else {\n      hearts[id] = {count: 1}\n    }\n    this.setState({\n      hearts\n    })\n  }\n\n  render() {\n    const leaders = this.props.leaders.map( (leader, index) =>\n    <li key={index}> {leader.name}, score: {leader.score}, time: {leader.time}\n      <a key={index} name={index} onClick={ () => this.addHeart(index, !this.state.hearts[index] ? 0 : this.state.hearts[index].count ) } className='heart'> heart(s): {!this.state.hearts[index]? 0 : this.state.hearts[index].count }</a>\n    </li> )\n\n\n    return (\n      <ul>\n        { leaders }\n      </ul>\n    )\n  }\n}\n\nexport default LeaderboardList\n","import React from 'react'\nimport LeaderboardList from './LeaderboardList'\nimport { connect } from 'react-redux'\n\nclass LeaderboardContainer extends React.Component {\n\n  state = {\n    leaders: [ { name: 'John Smith', score: 240, time: 23 }, { name: 'Reggy Uptown', score: 340, time: 45 }, { name: 'Sue Runner', score: 140, time: 50 } ]\n  }\n\n  render() {\n    return (\n      <div className='wrapper'>\n        <div className='leaderboard'>\n          <h2>Leaderboard</h2>\n          <p className='description'>Here's the top team submissions</p>\n          <LeaderboardList leaders={this.state.leaders} />\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    state: state\n  }\n}\n\nexport default connect(mapStateToProps)(LeaderboardContainer)\n","import React from 'react'\n\nclass HowToPlay extends React.Component {\n\n  render() {\n    return (\n      <div className='wrapper'>\n        <div className='how-to-play'>\n          <h1>How To Play</h1>\n          <p>I'm baby tote bag photo booth chia listicle. Activated charcoal selfies quinoa raclette offal mustache. Hexagon taxidermy kitsch godard raw denim meh knausgaard listicle next level PBR&B lyft fingerstache normcore. Chambray wolf meggings health goth. Kogi poutine kickstarter master cleanse artisan edison bulb gochujang viral tbh biodiesel etsy keffiyeh yuccie schlitz waistcoat. Waistcoat mixtape brunch tacos, drinking vinegar plaid literally. Everyday carry tote bag palo santo, messenger bag cornhole leggings vegan artisan retro iceland listicle slow-carb hoodie fam mixtape.</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default HowToPlay\n","import React from 'react'\nimport { API_ROOT, HEADERS } from '../../constants';\n\nclass NewRoomForm extends React.Component {\n  state = {\n    title: '',\n    status: 'preplay'\n  }\n\n  handleChange = e => {\n    this.setState({ title: e.target.value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault()\n    event.stopPropagation()\n    fetch(`${API_ROOT}/rooms`, {\n      method: 'POST',\n      headers: HEADERS,\n      body: JSON.stringify(this.state)\n    });\n    this.setState({ title: '' })\n  };\n\n  render = () => {\n    return (\n      <div className=\"newRoomForm\">\n        <form name='newRoomForm' onSubmit={event => this.handleSubmit(event)}>\n          <label>Create A New Room (3-15) characters-long:</label>\n          <br />\n          <input\n            type=\"text\"\n            value={this.state.title}\n            onChange={this.handleChange}\n          />\n          <button value='submit'>submit</button>\n        </form>\n      </div>\n    );\n  };\n}\n\nexport default NewRoomForm;\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nclass Room extends React.Component {\n\n  render() {\n    return (\n      <li>\n        <Link className='room' to={`/rooms/${this.props.id}`} >\n          { this.props.title }\n        </Link>\n        <p className='status'>game status:\n          <span> {this.props.status}</span>\n        </p>\n        <p className='button' >\n          <Link to={`/rooms/${this.props.id}`}>enter room</Link>\n        </p>\n      </li>\n    )\n  }\n\n}\n\nexport default Room\n","import React from 'react';\nimport NewRoomForm from './NewRoomForm'\nimport Room from './Room'\nimport cable from '../../services/Cable'\n\nimport { connect } from 'react-redux'\nimport { loadRooms } from '../../redux/actions'\n\nclass RoomsList extends React.Component {\n\n  componentDidMount = () => {\n    cable.disconnect()\n    cable.subscriptions.subscriptions.forEach( subscription => {\n      subscription.unsubscribe()\n    })\n    this.props.loadRooms()\n    // --- ACTION CABLE --- //\n    this.roomsChannel()\n    // clear state of selectedRoom\n    this.props.removeSelectedRoom()\n  }\n\n  componentWillUnmount = () => {\n    //console.log('RoomsList unmounted');\n    // --- ACTION CABLE --- //\n    cable.disconnect()\n    // brute disconnect is okay here \n    cable.subscriptions.subscriptions.forEach( subscription => {\n      subscription.unsubscribe()\n    })\n  }\n\n\n  roomsChannel = () => {\n    cable.subscriptions.create({\n    channel: `RoomsChannel`,\n    },\n      {connected: () => {\n        console.log('RoomsChannel connected!')\n      },\n      disconnected: () => {\n        console.log('RoomsChannel disconnected!');\n      },\n      received: data => {\n        this.handleReceivedRoom(data)\n        console.log('RoomsChannel data received')\n      }\n    })\n  }\n\n  handleReceivedRoom = response => {\n    this.props.loadRooms()\n  }\n\n  mapRooms = rooms => {\n    return rooms.map(room => {\n      return (\n        <Room key={room.id} id={room.id} title={room.title} status={room.status}/>\n      )\n    })\n  }\n\n  loading = () => <span className='loading-message'> </span>\n\n  render = () => {\n    const { rooms, loadingRooms } = this.props\n    return (\n      <div className=\"roomsList\">\n        <h1>Rooms</h1>\n        <p>Select a room or create a new one</p>\n        <ul>\n          { loadingRooms ? this.loading() : this.mapRooms(this.props.rooms) }\n        </ul>\n\n        <NewRoomForm />\n\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    rooms: state.rooms.roomsList,\n    loadingRooms: state.rooms.loading\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    loadRooms: () => { dispatch(loadRooms()) },\n    removeSelectedRoom: () => dispatch({type: 'REMOVE_SELECTED_ROOM',}),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RoomsList)\n","import React from 'react'\nimport RoomsList from '../rooms/RoomsList'\n\nclass HowToPlay extends React.Component {\n\n  render() {\n    return (\n      <div className='wrapper'>\n        <div className='landing-page'>\n          <h1>Hey there, welcome to Draword.</h1>\n          <h3>The current theme for the game is Popular Karaoke Song.</h3>\n\n          <p>So try to think of songs that you'd chose to slay the microphone, if your guessing. The title is only necessary, not the artist, to win the round. If you decide to draw, draw your heart out and keep a 'Never Gonna Give You Up' attitude until either time expires or the word is correctly guessed.</p>\n\n          <p>If you like to draw, either choose a room that is marked 'You can draw' or make your own room. Then share the URL with your friends to start the game.</p>\n\n          <p>If you want to guess, select a room that is marked 'be a guesser.' You'll receive updates via the chat box in regards to the gameplay.</p>\n\n          <p className='strong'>Good Luck!</p>\n        </div>\n\n        <RoomsList />\n\n      </div>\n    )\n  }\n}\n\nexport default HowToPlay\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <div id='footer'>\n        <p>\n          <Link to='/'>Draword</Link>\n          <Link className='footer-link' to='/new'>New Game</Link>\n          <Link className='footer-link' to='/how-to-play'> How To Play</Link>\n          <Link className='footer-link' to='/leaderboard'>Leaderboard</Link>\n        </p>\n      </div>\n    )\n  }\n}\n\nexport default Footer\n","import React from 'react'\n\nclass FourOFour extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <h2>Hmm... Something isn't right</h2>\n        <p>Whoops! something went wrong maybe <strong><code>{this.props.match.url}</code></strong> isn't a valid URL</p>\n      </div>\n    )\n  }\n\n}\n\nexport default FourOFour\n","import './css/Main.css'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Header from './components/ui/Header.js'\nimport GameContainer from './containers/GameContainer'\nimport LeaderboardContainer from './components/leaderboard/LeaderboardContainer'\nimport HowToPlay from './components/howToPlay/HowToPlay'\nimport LandingPage from './components/landingPage/LandingPage'\nimport Footer from './components/ui/Footer'\nimport FourOFour from './services/FourOFour'\n// action cable\nimport RoomsList from './components/rooms/RoomsList'\n\nfunction App() {\n\n  return (\n    <div className='App'>\n      <Router>\n        <Header />\n        <Switch>\n          <Route exact path='/' component={LandingPage} />\n          <Route exact path='/new' component={RoomsList} />\n          <Route exact path='/leaderboard' component={LeaderboardContainer} />\n          <Route exact path='/how-to-play' component={HowToPlay} />\n          <Route exact path='/rooms' component={RoomsList} />\n          <Route exact path='/rooms/:id' render={routerProps => <GameContainer {...routerProps} />} />\n          <Route path='*' render={routerProps => <FourOFour {...routerProps}  />} />\n        </Switch>\n        <Footer />\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport rootReducer from './redux/reducers/rootReducer';\nimport { Provider } from 'react-redux';\nimport { compose, applyMiddleware,createStore } from 'redux';\nimport thunk from 'redux-thunk'\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhancer(applyMiddleware(thunk))\n)\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}